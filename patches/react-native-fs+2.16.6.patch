diff --git a/node_modules/react-native-fs/.DS_Store b/node_modules/react-native-fs/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..919434a
--- /dev/null
+++ b/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:">
+   </FileRef>
+</Workspace>
diff --git a/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/xcuserdata/azimgd.xcuserdatad/UserInterfaceState.xcuserstate b/node_modules/react-native-fs/RNFS.xcodeproj/project.xcworkspace/xcuserdata/azimgd.xcuserdatad/UserInterfaceState.xcuserstate
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-fs/RNFS.xcodeproj/xcuserdata/azimgd.xcuserdatad/xcschemes/xcschememanagement.plist b/node_modules/react-native-fs/RNFS.xcodeproj/xcuserdata/azimgd.xcuserdatad/xcschemes/xcschememanagement.plist
new file mode 100644
index 0000000..3166687
--- /dev/null
+++ b/node_modules/react-native-fs/RNFS.xcodeproj/xcuserdata/azimgd.xcuserdatad/xcschemes/xcschememanagement.plist
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>SchemeUserState</key>
+	<dict>
+		<key>RNFS-tvOS.xcscheme_^#shared#^_</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>1</integer>
+		</dict>
+		<key>RNFS.xcscheme_^#shared#^_</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>0</integer>
+		</dict>
+	</dict>
+</dict>
+</plist>
diff --git a/node_modules/react-native-fs/RNFSManager.h b/node_modules/react-native-fs/RNFSManager.h
index 8ef10e4..907069d 100644
--- a/node_modules/react-native-fs/RNFSManager.h
+++ b/node_modules/react-native-fs/RNFSManager.h
@@ -16,4 +16,6 @@ typedef void (^CompletionHandler)(void);
 
 +(void)setCompletionHandlerForIdentifier: (NSString *)identifier completionHandler: (CompletionHandler)completionHandler;
 
+pthread_mutex_t *tj_HEICEncodingLock(void);
+
 @end
diff --git a/node_modules/react-native-fs/RNFSManager.m b/node_modules/react-native-fs/RNFSManager.m
index c443d20..e52ad1e 100755
--- a/node_modules/react-native-fs/RNFSManager.m
+++ b/node_modules/react-native-fs/RNFSManager.m
@@ -23,6 +23,7 @@
 
 #import <CommonCrypto/CommonDigest.h>
 #import <Photos/Photos.h>
+#include <pthread.h>
 
 
 @interface RNFSManager()
@@ -39,6 +40,16 @@ @implementation RNFSManager
 
 RCT_EXPORT_MODULE();
 
+pthread_mutex_t *tj_HEICEncodingLock(void)
+{
+    static pthread_mutex_t lock;
+    static dispatch_once_t onceToken;
+    dispatch_once(&onceToken, ^{
+        pthread_mutex_init(&lock, nil);
+    });
+    return &lock;
+}
+
 - (dispatch_queue_t)methodQueue
 {
   return dispatch_queue_create("pe.lum.rnfs", DISPATCH_QUEUE_SERIAL);
@@ -764,7 +775,7 @@ + (BOOL)requiresMainQueueSetup
  * width and height. Also the resizeMode will be considered.
  */
 RCT_EXPORT_METHOD(copyAssetsFileIOS: (NSString *) imageUri
-                  toFilepath: (NSString *) destination
+                  toFilepath: (NSString *) imageDestination
                   width: (NSInteger) width
                   height: (NSInteger) height
                   scale: (CGFloat) scale
@@ -826,11 +837,31 @@ + (BOOL)requiresMainQueueSetup
                                               contentMode:contentMode
                                                   options:imageOptions
                                             resultHandler:^(UIImage *result, NSDictionary<NSString *, id> *info) {
-        if (result) {
+        if (result && [imageDestination rangeOfString:@".HEIC"].location == NSNotFound) {
             
             NSData *imageData = UIImageJPEGRepresentation(result, compression );
-            [imageData writeToFile:destination atomically:YES];
-            resolve(destination);
+            [imageData writeToFile:imageDestination atomically:YES];
+            resolve(imageDestination);
+
+        } else if (result) {
+
+            // extract source image metadata
+            CGDataProviderRef dataProvider = CGImageGetDataProvider(result.CGImage);
+            CGImageSourceRef src = CGImageSourceCreateWithData(dataProvider.data, NULL);
+            CFDictionaryRef metadata = CGImageSourceCopyProperties(src, NULL)
+
+            // set compression quality to lossless
+            CFMutableDictionaryRef options = CFDictionaryCreateMutableCopy(NULL, 0, metadata);
+            CFDictionaryAddValue(options, @kCGImageDestinationLossyCompressionQuality, @1);
+
+            NSData *imageData = nil;
+            NSMutableData *destinationData = [NSMutableData new];
+            CGImageDestinationRef destination = CGImageDestinationCreateWithData((__bridge CFMutableDataRef)destinationData, (__bridge CFStringRef)AVFileTypeHEIC, 1, NULL);
+            
+            // iOS devices seem to corrupt image data when concurrently creating HEIC images.
+            // Locking to ensure HEIC creation doesn't occur concurrently.
+            pthread_mutex_t *lock = tj_HEICEncodingLock();
+            pthread_mutex_lock(lock);
+            
+            CGImageDestinationAddImage(destination, result.CGImage, options);
+            CGImageDestinationFinalize(destination);
+            imageData = destinationData;
+
+            [imageData writeToFile:imageDestination atomically:YES];
+            resolve(imageDestination);
+            CFRelease(destination);
+            CFRelease(dataProvider);
+            CFRelease(src);
+            CFRelease(metadata);
+            CFRelease(options);
 
         } else {
             NSMutableDictionary* details = [NSMutableDictionary dictionary];
